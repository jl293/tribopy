# Chapter 11

import math

def Archard(K: float, W: float, L: float, H: float): # page 160
    '''
    ----------------------------------------------------------------------------------------------------
    By far the most widely-used model for steady-state wear is the Archard equation, V = K * (WL)/H

    K: wear coefficient
    W: load
    L: sliding distance, enter 0 if calculating V/L = K * W/H
    H: hardness of the softer material
    '''
    if L != 0:
        return K*((W*L)/H)
    elif L == 0:
        return K*(W/H)

def Wi(ai: float, H: float): # page 162
    '''
    ----------------------------------------------------------------------------------------------------
    The expression for approximating load Wi is pi * ai^2 * H.

    ai: contact radius
    H: hardness of a hemispherical asperity that deforms plastically from Wi
    '''
    return math.pi * (ai**2) * H

def Li(ai: float): # page 163
    '''
    ----------------------------------------------------------------------------------------------------
    Li represents the distance an asperity slides.

    ai: contact radius
    '''
    return
    
def Vi(formula: bool, ai: float, Li: float, Wi: float, H: float): # page 163
    '''
    ----------------------------------------------------------------------------------------------------
    Vi expresses the volume of material deformed and has two formulas. Enter unused variables for your required formula as 0 (ex. enter 0 for ai if using formula 2).

    1. (2/3)*pi*ai^3
    2. (1/3)*((Wi*Li)/H)

    formula: True for formula 1, False for formula 2
    ai: contact radius
    Wi: load
    Li: distance that the asperity slides
    H: hardness of the asperity material
    '''
    if formula == True:
        return (2/3)*math.pi*(ai**3)
    elif formula == False:
        return (1/3)*((Wi*Li)/H)
    else:
        print('Enter "True" for formula 1 or "False" for formula 2.')
    
def V(Kadh: float, W: float, L: float, H: float): # page 163
    '''
    ----------------------------------------------------------------------------------------------------
    The total wear is the sum of all the worn volume for all asperities. In practice, only a fraction of the asperities will result in wear particles. Therefore, summing Vi over all asperities and introducing a factor Kadh to capture the probability that a wear particle will be generated by each asperity leads to the original Archard wear model:
    V = Kadh * (W*L)/H
    The magnitude of the adhesive wear coefficient can vary across orders of magnitude from 10^-8 to 10^-2. The adhesive wear coefficient is a function of the materials in contact, environment, and surface roughness.

    Kadh: adhesive wear coefficient
    W: load
    L: distance that the asperities slide
    H: hardness of the asperities
    '''
    return Kadh*((W*L)/H)

'''
NOTE: All functions below need context added from the textbook.
'''

def Wi_ductile(ai: float, H: float): # page 165
    '''
    ai: contact radius
    H: hardness of asperity material
    '''
    return (1/2)*math.pi*(ai**2)*H

def Vi_ductile(ai: float, L: float, theta: float): # page 165
    '''
    ai: contact radius
    L: distance that asperity slides
    theta: cone angle for conical asperities
    '''
    if theta > 0:
        theta = math.radians(theta)
    return (ai**2)*L*math.tan(theta)

def V_ductile(formula: bool, theta: float, W: float, L: float, H: float, Kabr: float): # page 165
    '''
    1. ((2*math.tan(theta))/math.pi)*((W*L)/H)

    formula: True = formula 1, False = formula 2
    theta: cone angle of conical asperity
    W: load
    L: distance that asperity slides
    H: hardness of asperity
    Kabr: abrasion coefficient, can vary between 10^-6 to 10^-1
    '''
    if theta > 0:
        theta = math.radians(theta)
    if formula == True:
        return ((2*math.tan(theta))/math.pi)*((W*L)/H)
    elif formula == False:
        return Kabr*((W*L)/H)
    else:
        print('Enter "True" for formula 1 or "False" for formula 2.')

def V_brittle(a: float, KIC: float, H: float): # page 166
    '''
    a: ???
    KIC: fracture toughness
    H: hardness of asperity
    '''
    return a*(1/((KIC**(1/2))*(H**(5/8))))